import r2pipe
import sys
import json
import argparse

class X64dbg_obj:
    def __init__(self):
        self.breakpoints = {}
        self.breakpoints['breakpoints'] = []

    def new_bp(self, address, enabled, oldbytes, module):
        breakpoint = {}
        breakpoint['address'] = address
        breakpoint['enabled'] = enabled
        breakpoint['oldbytes'] = oldbytes
        breakpoint['type'] = 0
        breakpoint['titantype'] = "0x0"
        breakpoint['name'] = ""
        breakpoint['module'] = module
        breakpoint['breakCondition'] = ""
        breakpoint['logText'] = ""
        breakpoint['logCondition'] = ""
        breakpoint['commandText'] = ""
        breakpoint['commandCondition'] = ""
        breakpoint["fastResume"] = ""
        breakpoint["silent"] = ""
        self.breakpoints['breakpoints'].append(breakpoint)

    def write_obj(self, filename):
        with open(filename, 'w') as file:
            json.dump(self.breakpoints, file)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Create a X32/64DBG database from a function call graph.')
    parser.add_argument('path',type=str, help='Path to executable')
    parser.add_argument('-f','--function', type=str, help='HEX address of the function you want to analyze.', required=True)
    parser.add_argument('-o', '--output', help='Output filename for the x32/64 db', required=True)

    args = parser.parse_args()

    path_to_exe = args.path
    addr_function_callgraph = args.function

    r2p = r2pipe.open(path_to_exe)
    
    filename = path_to_exe.split('/')[-1]

    r2p.cmd('aaa; s ' + addr_function_callgraph)
    infos = r2p.cmdj('iej')[0]
    base_addr = infos['baddr']

    call_graph = r2p.cmd('axg').split('\n')
    abs_addr = []
    new_addr = []

    for call in call_graph:
        abs_address = call.replace('-','').strip().split(' ')[0]
        abs_addr.append(abs_address)
        new_address = hex(int(abs_address, 16) - base_addr)
        new_addr.append(new_address)
        
    old_bytes = []
    for address in abs_addr:
        old_byte = ''.join(map(hex, r2p.cmdj('p8j 2 @ ' + address))).replace('0x', '')
        old_bytes.append(old_byte)

    x64dbg = X64dbg_obj()

    for i in range(0, len(new_addr)):
        x64dbg.new_bp(new_addr[i], True, old_bytes[i], filename)

    x64dbg.write_obj(args.output)