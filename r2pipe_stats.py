
import r2pipe
import sys
import operator
import collections

# pre analyze stuffs => statistics about the binary like most called functions, calls from functions, 
# harder stuffs => hash, json database, comparison between function and functions in db, scoring, ... 

def get_refs_to_fct(a):
    refs_to = (r2p.cmd('axq~'+str(hex(a['offset']).strip('0x')))).split('\n')
    result = []
    if refs_to != ['']:
        for xref in refs_to:
            result.append(xref.split(' ')[2])
        result = list(set(result))
    return result

def get_refs_from_fct(a):
    refs_from = (r2p.cmd('pif@'+str(a['offset'])+'~call')).split('\n')
    result = []
    for ref in refs_from:
        result.append(ref.strip('call '))
    result = list(set(result))
    return result

def order_fct_dic(fct_dic, ordering_value):
    fct_dic_sorted = collections.OrderedDict(sorted(fct_dic.items(), key=lambda x: x[1][ordering_value]))
    return fct_dic_sorted

if __name__ == "__main__":
    if len(sys.argv) < 3:
        sys.exit(1)

    path_file = sys.argv[1]
    ordering_value = sys.argv[2]

    r2p = r2pipe.open(path_file)  # open without arguments only for #!pipe
    r2p.cmd('aa;aac')  # analyze all symbols and calls
  
    fct_dic = {}

    for a in r2p.cmdj('aflj'): # return info of functions in jason
        if a['size'] > 0: # if size of function is > 128 continue
            refs_from = get_refs_from_fct(a)
            refs_to = get_refs_to_fct(a)
            fct_dic[a['name']] = {'refs_from': refs_from, 'refs_to': refs_to, 'nmb_refs_to': len(refs_to), 'size':a['size'], 'nmb_refs_from': len(refs_from)}

    fct_dic_sorted = order_fct_dic(fct_dic, ordering_value)

    title = '|\t\tfunction\t\t|\t\tnmb refs to\t\t|\t\tnmb refs from\t\t|\t\tsize\t\t|'
    print(title)
    print('-'*len(title))
  
    for function, elements in fct_dic_sorted.items():
        print('|\t\t'+function+'\t\t|\t\t'+ str(elements['nmb_refs_to']) +'\t\t|\t\t' + str(elements['nmb_refs_from'])+'\t\t|\t\t'+str(elements['size'])+'\t\t|')
        #print('REFS TO\n--------')
        #print(elements['refs_to'])
        #print()

        #print('NUMBERS REFS TO\n---------------')
        #print(elements['nmb_refs_to'])
        #print()
        
        #print('REFS FROM\n---------')
        #print(elements['refs_from'])
        #print()

        #print('NUMBERS REFS FROM\n-----------------')
        #print(elements['nmb_refs_from'])
        #print()

        #print('SIZE\n----')
        #print(elements['size'])
        #print('====================\n')