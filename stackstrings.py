from ghidra.app.emulator import EmulatorHelper
from ghidra.util.task import ConsoleTaskMonitor
from ghidra.program.model.symbol.SourceType import *

'''
How to:
- select lines in disassembler (not decompiler because it skips some lines which are not useful for it)
- launch script
- enjoy

Resources:
- https://medium.com/@cetfor/emulating-ghidras-pcode-why-how-dd736d22dfb
- https://ghidra.re/ghidra_docs/api/ghidra/app/emulator/EmulatorHelper.html
'''


def getAddress(offset):
    return currentProgram.getAddressFactory().getDefaultAddressSpace().getAddress(offset)


def getProgramRegisterList(currentProgram):
    pc = currentProgram.getProgramContext()
    return pc.registers


def emulate(emuHelper, beg, end):
    print("[*] Emulation started")
    print("Beginning: {:#018x}".format(beg.getOffset()))
    print("Ending: {:#018x}".format(end.getOffset()))
    emuHelper.writeRegister(emuHelper.getPCRegister(), beg.getOffset())

    while monitor.isCancelled() is False:
        executionAddress = emuHelper.getExecutionAddress()
        if (executionAddress > end):
            print("[*] Emulation finished")
            return
        success = emuHelper.step(monitor)
        if success is False:
            lastError = emuHelper.getLastError()
            printerr("Emulation Error: '{}'".format(lastError))
            return
    return


def run():
    monitor = ConsoleTaskMonitor()
    emuHelper = EmulatorHelper(currentProgram)
    emuHelper.enableMemoryWriteTracking(True)
    fnManager = currentProgram.getFunctionManager()
    beg = currentSelection.getFirstRange().getMinAddress()
    end = currentSelection.getLastRange().getMaxAddress()
    function = fnManager.getFunctionContaining(beg)
    varsFn = function.getAllVariables()
    setVarsFn = {}
    for var in varsFn:
        stackOffset = var.getStackOffset()
        print(stackOffset)
        setVarsFn[-stackOffset] = var
    emulate(emuHelper, beg, end)
    mems = emuHelper.getTrackedMemoryWriteSet().getAddresses(True)
    for addr in mems:
        try:
            decrStr = emuHelper.readNullTerminatedString(addr, 0xffff)
            offset = addr.getOffset()
            print("{:#018x} => {}".format(offset, decrStr))
            name = "local_" + decrStr
            # because 0x0 - offset is annoying in python...
            var = setVarsFn[0xffffffff - offset + 1]
            var.setName(name, USER_DEFINED)
        except:
            continue
    emuHelper.dispose()


run()
